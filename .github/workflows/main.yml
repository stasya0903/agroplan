name: "CI"

on:
  pull_request:
    branches:
      - master  # Trigger on PRs targeting master
    paths:
      - "**.php"
      - "phpcs.xml"
      - ".github/workflows/phpcs.yml"

jobs:
  phpcs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # important!

      - name: Install PHP_CodeSniffer
        run: |
          curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
          php phpcs.phar --version

      - uses: tinovyatkin/action-php-codesniffer@v1
        with:
          files: "**.php"  # You can customize this glob to fit your repo structure
          phpcs_path: php phpcs.phar
          standard: phpcs.xml

  build_and_test:
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      DATABASE_URL: postgresql://test_user:test_password@127.0.0.1:5432/test_db
      CORS_ALLOW_ORIGIN: '^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up test environment
        run: |
          echo "
          APP_ENV=test
          CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'" > .env
          echo "
          DATABASE_URL=postgresql://test_user:test_password@127.0.0.1:5432/test_db?serverVersion=14&charset=utf8
          CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'
          " > .env.test.local
          
      

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build the Docker images
      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yaml build

      # Set up PHP environment and install dependencies
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, intl, pdo, pdo_pgsql
          ini-values: post_max_size=256M, upload_max_filesize=256M

        # Install Composer dependencies
      - name: Install Composer dependencies
        run: |
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install --no-interaction

      - name: Set up test DB
        run: |
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:schema:update --force --env=test

      - name: Seed system data
        run: |
          php bin/console app:seed:system-work-types --env=test

      - name: Run PHPUnit
        run: |
          export APP_ENV=test
          export DATABASE_URL=postgresql://test_user:test_password@127.0.0.1:5432/test_db
          php bin/phpunit

      # Optionally, you can clean up the containers after running tests
      - name: Cleanup
        run: |
          docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test  # Ensures deploy only happens after build_and_test completes successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key for deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Add your private key to GitHub Secrets

      - name: Deploy the application
        run: |
          echo "Deploying application..."
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} 'cd /var/www/agroplan/agroplan && git pull && ./deploy.sh'

    # Optional: Only deploy when pushing to master (adjust as needed)
    if: github.ref == 'refs/heads/master'